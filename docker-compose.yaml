version: "3.9"
 
########################### NETWORKS
networks:
  t2_proxy:
    name: t2_proxy
    driver: overlay
    ipam:
      config:
        - subnet: 192.168.90.0/24
  default:
    driver: overlay
  socket_proxy:
    name: socket_proxy
    driver: overlay
    ipam:
      config:
        - subnet: 192.168.91.0/24

########################### EXTENSION FIELDS
# Helps eliminate repetition of sections
# More info on how to use this https://github.com/htpcBeginner/docker-traefik/pull/228

# Common environment values
x-environment: &default-tz-puid-pgid
  TZ: $TZ
  PUID: $PUID
  PGID: $PGID

x-logging:
  # https://docs.docker.com/compose/compose-file/compose-file-v3/#logging
  &loki-logging
  driver: loki
  # https://grafana.com/docs/loki/latest/clients/docker-driver/
  options:
    loki-url: "http://172.17.0.1:3100/loki/api/v1/push" # docker0 interface from host

# Proxy Network and Security
x-network-and-security: &network-and-security
  networks:
    - t2_proxy

# Keys common to some of the services in basic-services.txt
x-common-keys-core: &common-keys-core
  <<: *network-and-security
  restart: always
  # profiles:
  # - core

# Keys common to some of the services in basic-services.txt
x-common-keys-monitoring: &common-keys-monitoring
  <<: *network-and-security
  restart: always
  # profiles:
  # - monitoring

# Keys common to some of the dependent services/apps
x-common-keys-apps: &common-keys-apps
  <<: *network-and-security
  restart: unless-stopped
  # profiles:
  # - apps

# Keys common to some of the services in media-services.txt
x-common-keys-media: &common-keys-media
  <<: *network-and-security
  restart: "no"
  # profiles:
  # - media
 
########################### SERVICES
services:
# All services / apps go below this line
 
# Traefik 2 - Reverse Proxy
  traefik:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    container_name: traefik
    logging: *loki-logging
    image: traefik:2.2.1 # the chevrotin tag refers to v2.2.x but introduced a breaking change in 2.2.2
    command: # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      - --entryPoints.traefik.address=:8080
      - --api=true
      - --api.dashboard=true
      - --log=true
      - --log.level=INFO # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/traefik.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=400-499
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      #- --providers.docker.endpoint=tcp://socket-proxy:2375
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=t2_proxy
      - --providers.docker.swarmMode=true
      - --providers.docker.watch=true
      - --entrypoints.https.http.tls.options=tls-opts@file
      # Add dns-godaddy as default certresolver for all services. Also enables TLS and no need to specify on individual services
      - --entrypoints.https.http.tls.certresolver=dns-godaddy
      - --entrypoints.https.http.tls.domains[0].main=$DOMAINNAME0
      - --entrypoints.https.http.tls.domains[0].sans=*.$DOMAINNAME0
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory.
      - --providers.file.watch=true # Only works on top level files in the rules folder
      #- --certificatesResolvers.dns-godaddy.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.dns-godaddy.acme.email=$GODADDY_EMAIL
      - --certificatesResolvers.dns-godaddy.acme.storage=/acme.json
      - --certificatesResolvers.dns-godaddy.acme.dnsChallenge.provider=godaddy
      - --certificatesResolvers.dns-godaddy.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      - --certificatesResolvers.dns-godaddy.acme.dnsChallenge.delayBeforeCheck=90 # To delay DNS check and reduce LE hitrate
      - --serverstransport.insecureskipverify=true
      - --metrics.prometheus=true
      - --metrics.prometheus.buckets=0.1,0.3,1.2,5.0
    networks:
      - t2_proxy
      # t2_proxy:
        # ipv4_address: 192.168.90.254
      - socket_proxy
    #healthcheck:
    #  test: ["CMD", "traefik", "healthcheck", "--ping"]
    #  interval: 5s
    #  retries: 3
    ports:
      - 80:80/tcp
      - 443:443/tcp
      - 8080:8080/tcp
    volumes:
      - $DOCKERDIR/traefik2/rules:/rules 
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - $DOCKERDIR/traefik2/acme/acme.json:/acme.json 
      - $DOCKERDIR/traefik2/traefik.log:/traefik.log 
      - $DOCKERDIR/shared:/shared
    environment:
      - GODADDY_API_KEY=$GODADDY_API_KEY
      - GODADDY_API_SECRET=$GODADDY_API_SECRET
    labels:
      - "traefik.enable=true"
      # HTTP-to-HTTPS Redirect
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAINNAME0`)" #  && (PathPrefix(`/api/`) || PathPrefix(`/dashboard/`))"
        #- "traefik.http.routers.traefik-rtr.tls.certresolver=dns-godaddy" # Comment out this line after first run of traefik to force the use of wildcard certs
      ## Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      ## Middlewares
      - "traefik.http.routers.traefik-rtr.middlewares=chain-oauth@file"

  registry:
    <<: *common-keys-core
    container_name: docker-registry
    logging: *loki-logging
    image: registry:2
    volumes:
      - $DOCKERDIR/registry:/var/lib/registry
    environment:
      - REGISTRY_HTTP_ADDR=0.0.0.0:5000
    networks:
      - default
    deploy:
      mode: 'global'
      placement:
        constraints:
          - 'node.hostname == docker-registry'
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.registry-rtr.entrypoints=http,https"
      - "traefik.frontend.redirect.entryPoint=https"
      - "traefik.http.routers.registry-rtr.rule=Host(`docker-registry.$DOMAINNAME0`)"
      ## Middlewares
      - "traefik.http.routers.registry-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.registry-rtr.service=registry-svc"
      - "traefik.http.services.registry-svc.loadbalancer.server.port=5000"
      - "traefik.port=5000"
      - "traefik.docker.network=registry_proxy_t2"
      #- "traefik.frontend.rule=Host:registry.garflak.com"
      - "traefik.frontend.rule=Host:docker-registry.$DOMAINNAME0"
  # # Whoami
  # whoami:
  #   <<: *common-keys-core # See EXTENSION FIELDS at the top
  #   container_name: whoami
  #   image: traefik/whoami
  #   labels:
  #     - "traefik.thhp.routers.whoami.rule=Host(`whoami.$DOMAINNAME0`)"

  # Docker Socket Proxy - Security Enchanced Proxy for Docker Socket
  socket-proxy:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    container_name: socket-proxy
    logging: *loki-logging
    image: tecnativa/docker-socket-proxy
    networks:
      - socket_proxy
      # socket_proxy:
      #   ipv4_address: 192.168.91.254 # You can specify a static IP
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    environment:
      - LOG_LEVEL=warning # debug,info,notice,warning,err,crit,alert,emerg
      ## Variables match the URL prefix (i.e. AUTH blocks access to /auth/* parts of the API, etc.).
      # 0 to revoke access.
      # 1 to grant access.
      ## Granted by Default
      - EVENTS=1
      - PING=1
      - VERSION=1
      ## Revoked by Default
      # Security critical
      - AUTH=0
      - SECRETS=0
      - POST=1 # Watchtower
      # Not always needed
      - BUILD=0
      - COMMIT=0
      - CONFIGS=0
      - CONTAINERS=1 # Traefik, portainer, etc.
      - DISTRIBUTION=0
      - EXEC=0
      - IMAGES=1 # Portainer
      - INFO=1 # Portainer
      - NETWORKS=1 # Portainer
      - NODES=0
      - PLUGINS=0
      - SERVICES=1 # Portainer
      - SESSION=0
      - SWARM=0
      - SYSTEM=0
      - TASKS=1 # Portainer
      - VOLUMES=1 # Portainer

  # Google OAuth - Single Sign On using OAuth 2.0
  oauth:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    container_name: oauth
    logging: *loki-logging
    image: thomseddon/traefik-forward-auth:latest
    environment:
      - CLIENT_ID=$GOOGLE_CLIENT_ID
      - CLIENT_SECRET=$GOOGLE_CLIENT_SECRET
      - SECRET=$OAUTH_SECRET
      - COOKIE_DOMAIN=$DOMAINNAME0
      - INSECURE_COOKIE=false
      - AUTH_HOST=oauth.$DOMAINNAME0
      - URL_PATH=/_oauth
      - WHITELIST=$MY_EMAIL
      - LOG_LEVEL=warn
      - LOG_FORMAT=text
      - LIFETIME=2592000 # 30 days 86400 # 1 day
      - DEFAULT_ACTION=auth
      - DEFAULT_PROVIDER=google
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.oauth-rtr.tls=true"
      - "traefik.http.routers.oauth-rtr.entrypoints=https"
      - "traefik.http.routers.oauth-rtr.rule=Host(`oauth.$DOMAINNAME0`)"
      ## Middlewares
      - "traefik.http.routers.oauth-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.oauth-rtr.service=oauth-svc"
      - "traefik.http.services.oauth-svc.loadbalancer.server.port=4181"

  # Portainer - WebUI for Containers
  portainer:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    container_name: portainer
    image: portainer/portainer-ce:latest
    logging: *loki-logging
    command: -H unix:///var/run/docker.sock # # Use Docker Socket Proxy instead for improved security
    #command: -H tcp://socket-proxy:2375
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro # # Use Docker Socket Proxy instead for improved security
      - $DOCKERDIR/portainer/data:/data # Change to local directory if you want to save/transfer config locally
    environment:
      - TZ=$TZ
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.portainer-rtr.entrypoints=https"
      - "traefik.http.routers.portainer-rtr.rule=Host(`portainer.$DOMAINNAME0`)"
      ## Middlewares
      - "traefik.http.routers.portainer-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.portainer-rtr.service=portainer-svc"
      - "traefik.http.services.portainer-svc.loadbalancer.server.port=9000"

  # Home Assistant - Smart home hub
  homeassistant:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: homeassistant/home-assistant
    logging: *loki-logging
    container_name: homeassistant
    devices:
      - /dev/ttyUSB0:/dev/ttyUSB0
      - /dev/ttyUSB1:/dev/ttyUSB1
      - /dev/ttyACM0:/dev/ttyACM0
    volumes:
      - $DOCKERDIR/homeassistant:/config
      - /etc/localtime:/etc/localtime:ro
      - $DOCKERDIR/shared:/shared
        #ports:
        #"8123:8123"
    privileged: true
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.homeassistant-rtr.entrypoints=https"
      - "traefik.http.routers.homeassistant-rtr.rule=Host(`homeassistant.$DOMAINNAME0`)"
      ## Middlewares
      - "traefik.http.routers.homeassistant-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.homeassistant-rtr.service=homeassistant-svc"
      - "traefik.http.services.homeassistant-svc.loadbalancer.server.port=8123"

  # MariaDB - MySQL Database
  mariadb:
    <<: *common-keys-core # See EXTENSION FIELDS at the top
    container_name: mariadb
    logging: *loki-logging
    image: linuxserver/mariadb:latest
    restart: always
    ports:
      - "3306:3306"
    volumes:
      - $DOCKERDIR/mariadb/data:/config
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD
      
  # Grafana - Graphical data visualization for InfluxDB data
  grafana:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: grafana/grafana:latest
    logging: *loki-logging
    container_name: grafana
    user: $PUID
    volumes:
      - $DOCKERDIR/grafana:/var/lib/grafana
    environment:
      GF_INSTALL_PLUGINS: "grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel,grafana-piechart-panel"
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=t2_proxy"
      ## HTTP Routers
      - "traefik.http.routers.grafana-rtr.entrypoints=https"
      - "traefik.http.routers.grafana-rtr.rule=Host(`grafana.$DOMAINNAME0`)"
      ## Middlewares
      - "traefik.http.routers.grafana-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.grafana-rtr.service=grafana-svc"
      - "traefik.http.services.grafana-svc.loadbalancer.server.port=3000"
  
  # Prometheus - Monitoring and Alerting
  prometheus:
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: prom/prometheus:latest
    logging: *loki-logging
    container_name: prometheus
    environment:
      <<: *default-tz-puid-pgid
    volumes:
      - $DOCKERDIR/prometheus:/prometheus
      - $DOCKERDIR/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - "--config.file=/etc/prometheus/prometheus.yml" # target
      - "--storage.tsdb.path=/prometheus" # storage
      - "--web.console.libraries=/etc/prometheus/console_libraries" # console libraries
      - "--web.console.templates=/etc/prometheus/consoles" # console templates
      - "--web.enable-lifecycle" # enable lifecycle
    labels:
      - "traefik.enable=true"
      - "traefik.backend=prometheus"
      - "traefik.frontend.rule=Host(`prometheus.$DOMAINNAME0`)"
      - "traefik.docker.network=t2_proxy"
      ## HTTP Routers
      - "traefik.http.routers.prometheus-rtr.entrypoints=https"
      - "traefik.http.routers.prometheus-rtr.rule=Host(`prometheus.$DOMAINNAME0`)"
      ## Middlewares
      - "traefik.http.routers.prometheus-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.prometheus-rtr.service=prometheus-svc"
      - "traefik.http.services.prometheus-svc.loadbalancer.server.port=9090"

  loki: # Stores local and remote logs
    # https://hub.docker.com/r/grafana/loki
    # https://github.com/grafana/loki
    # https://github.com/grafana/loki/tree/main/production
    # https://grafana.com/docs/loki/latest/overview/
    <<: *common-keys-apps # See EXTENSION FIELDS at the top
    image: grafana/loki:latest
    logging: *loki-logging
    container_name: loki
    volumes:
      - $DOCKERDIR/loki:/loki
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.loki.entrypoints=websecure"
      - "traefik.http.routers.loki.rule=Host(`loki.server.test`)"
      - "traefik.http.services.loki.loadbalancer.server.port=3100"
      - "traefik.http.middlewares.loki_auth.basicauth.users=loki_agent:loki_agent_password"
      - "traefik.http.routers.loki.middlewares=loki_auth@docker"
